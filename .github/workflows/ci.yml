name:  CI test

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'db/**'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Check out my other private repo
      uses: actions/checkout@v3
      with:
         repository: daylight-liontex/WholeSale
         token:      ${{ secrets.my_pat }}
         path:       WholeSale
         
    - name: download latest PBL
      shell: pwsh
      env:   
         PBL_URI:      ${{ secrets.LATEST_PBL_URI }}
         POWERGEN_URI: ${{ secrets.POWERGEN_URI }}
         ACCESS_KEY:   ${{ secrets.JFROG_TOKEN }}
      run:  |
         Invoke-WebRequest -Uri $env:PBL_URI -OutFile "pbl.zip" -Headers @{ "Authorization" = $env:ACCESS_KEY}
         Invoke-WebRequest -Uri $env:POWERGEN_URI -OutFile "powergen.zip" -Headers @{ "Authorization" = $env:ACCESS_KEY}

    - name: Extract source & compiler
      shell: pwsh
      continue-on-error: true
      run:  |
         Expand-Archive pbl.zip -DestinationPath ./WholeSale/src
         Expand-Archive powergen.zip -DestinationPath ./WholeSale/src
         
    - name: Install VcRedist
      shell: pwsh
      run:  |
            #Make and download to folder#
            New-Item -Path c:\VCRuntime -ItemType directory
            Write "Download Microsoft Visual C++ 2005"
            Write "Microsoft Visual C++ 2005 SP1 Redistributable Package (x86)" -Verbose
            Invoke-WebRequest   "http://download.microsoft.com/download/8/B/4/8B42259F-5D70-43F4-AC2E-4B208FD8D66A/vcredist_x86.EXE" -OutFile "C:\VCRuntime\vcredist_x86_2005.exe"
            #Install the files from the directory#
            $files = Get-ChildItem -Path "C:\VCRuntime\" -Filter *.exe
            foreach($item in $files)
            {
            Write-Output "Installing: $item"
            Start-Process -FilePath $item.FullName -ArgumentList '/q' -Wait
            Write-Output "Installation of $item has been completed."
            }
            Remove-Item -path "C:\VCRuntime" -recurse
            Write-Output "All packages have been installed and cleanup performed."

    - name: Prepare
      shell: pwsh
      run:  |
         New-Item -ItemType Junction -Path ./pic -Target ../pic
         & .build\prepare.ps1
      working-directory: ./WholeSale/src

    - name: Import PBL
      shell: pwsh
      run:  |
         & .build\sync.ps1
      working-directory: ./WholeSale/src

    - name: Collect & upload PBL
      shell: pwsh
      env:   
         PBL_URI:      ${{ secrets.LATEST_PBL_URI }}
         ACCESS_KEY:   ${{ secrets.JFROG_TOKEN }}
      run:  |
         7z a -r pbl.zip *.pbl
         $ARTIFACT_SHA1_CHECKSUM=$(Get-FileHash -Algorithm SHA1 pbl.zip).Hash
         Invoke-RestMethod -Uri $env:PBL_URI -Method Put -InFile "pbl.zip" -Headers @{ "Authorization" = $env:ACCESS_KEY;"X-Checksum-SHA1"=$ARTIFACT_SHA1_CHECKSUM;}
      working-directory: ./WholeSale/src

    - name: Build EXE
      shell: pwsh
      run:  |
         & .build\build.ps1
      working-directory: ./WholeSale/src

    - name: Collect & Upload EXE
      shell: pwsh
      env:   
         EXE_URI:      ${{ secrets.LATEST_EXE_URI }}
         ACCESS_KEY:   ${{ secrets.JFROG_TOKEN }}
      run:  |
         Get-ChildItem . -Recurse | Resolve-Path -Relative | Where {$_ -match '^.*\\.*\\.*\.(exe|pbd)$'}|Compress-Archive -DestinationPath exe.zip
         $ARTIFACT_SHA1_CHECKSUM=$(Get-FileHash -Algorithm SHA1 exe.zip).Hash
         Invoke-RestMethod -Uri $env:EXE_URI -Method Put -InFile "exe.zip" -Headers @{ "Authorization" = $env:ACCESS_KEY;"X-Checksum-SHA1"=$ARTIFACT_SHA1_CHECKSUM;}
      working-directory: ./WholeSale/src

    - name: Collect & Upload LOG
      shell: pwsh
      if:    success() || failure()
      env:   
         LOG_URI:      ${{ secrets.LATEST_LOG_URI }}
         ACCESS_KEY:   ${{ secrets.JFROG_TOKEN }}
      run:  |
         7z a log.zip *.log
         $ARTIFACT_SHA1_CHECKSUM=$(Get-FileHash -Algorithm SHA1 log.zip).Hash
         Invoke-RestMethod -Uri $env:LOG_URI -Method Put -InFile "exe.zip" -Headers @{ "Authorization" = $env:ACCESS_KEY;"X-Checksum-SHA1"=$ARTIFACT_SHA1_CHECKSUM;}
      working-directory: ./WholeSale/src

#    - name: Checkout
#      uses: actions/checkout@v2
#      with:
#        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
    
#    - name:  Archive artifacts
#      shell: pwsh
#      run:   Compress-Archive -Path *.* -DestinationPath artifact.zip
      
#    - name: DIR2
#      run:  dir *.*   

#    - uses: actions/upload-artifact@v1
#      with:
#         name: Upload artifacts
#         path: artifact.zip
